float GL_CheckExtension(string ext);
float GL_Have_TextureCompression();

void forAllDescendants(entity root, void(entity, entity) funcPre, void(entity, entity) funcPost, entity pass);
void saveAllCvars(entity root);
void loadAllCvars(entity root);

void makeMulti(entity me, string otherCvars);
void makeCallback(entity me, entity cbent, void(entity, entity) cbfunc);

void setDependent(entity e, string theCvarName, float theCvarMin, float theCvarMax);
void setDependentAND(entity e, string theCvarName, float theCvarMin, float theCvarMax, string theCvar2Name, float theCvar2Min, float theCvar2Max);
void setDependentOR(entity e, string theCvarName, float theCvarMin, float theCvarMax, string theCvar2Name, float theCvar2Min, float theCvar2Max);
void setDependentAND3(entity e, string theCvarName, float theCvarMin, float theCvarMax, string theCvar2Name, float theCvar2Min, float theCvar2Max, string theCvar3Name, float theCvar3Min, float theCvar3Max);
void setDependentStringNotEqual(entity e, string theCvarName, string theCvarValue);
void setDependentWeird(entity e, float(entity) func);

float tooltipdb;
void loadTooltips();
void unloadTooltips();
string getZonedTooltipForIdentifier(string s);

string resolvemod(string m);

string HUD_Panel_GetSettingName(float setting);

float URI_GET_DISCARD = 0;

float URI_GET_UPDATENOTIFICATION = 1;
void UpdateNotification_URI_Get_Callback(float id, float status, string data);

float URI_GET_CURL = 2;
float URI_GET_CURL_END = 9;
void Curl_URI_Get_Callback(float id, float status, string data);

void URI_Get_Callback(float id, float status, string data);

// game type list box stuff (does not NEED to contain all game types, other
// types stay available via console)
float GameType_GetID(float cnt);
string GameType_GetName(float cnt);
float GameType_GetCount();

#define DIALOG_HUDPANEL_COMMON_NOTOGGLE() \
	me.TR(me); \
		me.TD(me, 1, 1.4, e = makeXonoticTextLabel(0, _("Background:"))); \
			me.TD(me, 1, 1.6, e = makeXonoticTextSlider(strzone(strcat("hud_panel_", panelname, "_bg")))); \
				e.addValue(e, _("Default"), ""); \
				e.addValue(e, _("Disable"), "0"); \
				e.addValue(e, strzone(strcat("border_", panelname)), strzone(strcat("border_", panelname))); \
				e.configureXonoticTextSliderValues(e); \
	me.TR(me); \
		me.TDempty(me, 0.2); \
		me.TD(me, 1, 1.2, e = makeXonoticTextLabel(0, _("Color:"))); \
		me.TD(me, 2, 2.4, e = makeXonoticColorpickerString(strzone(strcat("hud_panel_", panelname, "_bg_color")), "hud_panel_bg_color")); \
			setDependentStringNotEqual(e, strzone(strcat("hud_panel_", panelname, "_bg_color")), ""); \
	me.TR(me); \
		me.TDempty(me, 0.2); \
		me.TD(me, 1, 1.2, e = makeXonoticCheckBoxString("", "1 1 1", strzone(strcat("hud_panel_", panelname, "_bg_color")), _("Use default"))); \
	me.TR(me); \
		me.TDempty(me, 0.2); \
		me.TD(me, 1, 1.2, e = makeXonoticTextLabel(0, _("Border size:"))); \
			me.TD(me, 1, 2.6, e = makeXonoticTextSlider(strzone(strcat("hud_panel_", panelname, "_bg_border")))); \
				e.addValue(e, _("Default"), ""); \
				e.addValue(e, _("Disable"), "0"); \
				for(i = 1; i <= 10; ++i) \
					e.addValue(e, strzone(ftos_decimals(i * 2, 0)), strzone(ftos(i * 2))); \
				e.configureXonoticTextSliderValues(e); \
	me.TR(me); \
		me.TDempty(me, 0.2); \
		me.TD(me, 1, 1.2, e = makeXonoticTextLabel(0, _("Alpha:"))); \
			me.TD(me, 1, 2.6, e = makeXonoticTextSlider(strzone(strcat("hud_panel_", panelname, "_bg_alpha")))); \
				e.addValue(e, _("Default"), ""); \
				for(i = 1; i <= 10; ++i) \
					e.addValue(e, strzone(ftos_decimals(i/10, 1)), strzone(ftos(i/10))); \
				e.configureXonoticTextSliderValues(e); \
	me.TR(me); \
		me.TDempty(me, 0.2); \
		me.TD(me, 1, 1.2, e = makeXonoticTextLabel(0, _("Team Color:"))); \
			me.TD(me, 1, 2.6, e = makeXonoticTextSlider(strzone(strcat("hud_panel_", panelname, "_bg_color_team")))); \
				e.addValue(e, _("Default"), ""); \
				e.addValue(e, _("Disable"), "0"); \
				for(i = 1; i <= 10; ++i) \
					e.addValue(e, strzone(ftos_decimals(i/10, 1)), strzone(ftos(i/10))); \
				e.configureXonoticTextSliderValues(e); \
	me.TR(me); \
		me.TDempty(me, 0.4); \
		me.TD(me, 1, 3, e = makeXonoticCheckBox(0, "hud_configure_teamcolorforced", _("Test the team color in HUD configure mode"))); \
	me.TR(me); \
		me.TDempty(me, 0.2); \
		me.TD(me, 1, 1.2, e = makeXonoticTextLabel(0, _("Padding:"))); \
			me.TD(me, 1, 2.6, e = makeXonoticTextSlider(strzone(strcat("hud_panel_", panelname, "_bg_padding")))); \
				e.addValue(e, _("Default"), ""); \
				for(i = 0; i <= 10; ++i) \
					e.addValue(e, strzone(ftos_decimals(i - 5, 0)), strzone(ftos(i - 5))); \
				e.configureXonoticTextSliderValues(e)
#define DIALOG_HUDPANEL_COMMON() \
	me.TR(me); \
		me.TD(me, 1, 3, e = makeXonoticCheckBox(0, strzone(strcat("hud_panel_", hudpanel)), _("Enable panel"))); \
	DIALOG_HUDPANEL_COMMON_NOTOGGLE()
