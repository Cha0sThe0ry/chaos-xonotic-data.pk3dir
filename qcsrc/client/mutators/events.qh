#ifndef CLIENT_MUTATORS_EVENTS_H
#define CLIENT_MUTATORS_EVENTS_H

#include "../../common/mutators/base.qh"

/* Called when the crosshair is being updated */
MUTATOR_HOOKABLE(UpdateCrosshair, EV_NO_ARGS);

/**
 * Called when a temp entity is parsed
 * NOTE: hooks MUST start with `if (MUTATOR_RETURNVALUE) return false;`
 * NOTE: hooks MUST start with `if (!ReadMutatorEquals(mutator_argv_int_0, name_of_mutator)) return false;`
 * NOTE: return true if you handled the command, return false to continue handling
 */
#define EV_CSQC_Parse_TempEntity(i, o) \
    /** mutator id */ i(int, mutator_argv_int_0) \
    /**/
MUTATOR_HOOKABLE(CSQC_Parse_TempEntity, EV_CSQC_Parse_TempEntity);

/**
 * Called when a shared entity is updated
 * NOTE: hooks MUST start with `if (MUTATOR_RETURNVALUE) return false;`
 * NOTE: hooks MUST start with `if (!ReadMutatorEquals(mutator_argv_int_0, name_of_mutator)) return false;`
 * NOTE: return true if you handled the command, return false to continue handling
 */
#define EV_CSQC_Ent_Update(i, o) \
    /** mutator id */ i(int, mutator_argv_int_0) \
    /** bIsNewEntity */ i(bool, mutator_argv_bool_0) \
    /**/
MUTATOR_HOOKABLE(CSQC_Ent_Update, EV_CSQC_Ent_Update);

/** Called when a projectile is linked with CSQC */
#define EV_Ent_Projectile(i, o) \
    /** entity id */ i(entity, self) \
    /**/
MUTATOR_HOOKABLE(Ent_Projectile, EV_Ent_Projectile);

/** Called when a projectile's properties are being modified */
#define EV_EditProjectile(i, o) \
    /** entity id */ i(entity, self) \
    /**/
MUTATOR_HOOKABLE(EditProjectile, EV_EditProjectile);

/* Called when projectiles are precached */
MUTATOR_HOOKABLE(PrecacheProjectiles, EV_NO_ARGS);

#endif
