float BOT_PICKUP_RATING_LOW	= 2500;
float BOT_PICKUP_RATING_MID	= 5000;
float BOT_PICKUP_RATING_HIGH	= 10000;

float WEP_TYPE_OTHER	      =  0x00; // not for damaging people
float WEP_TYPE_SPLASH	      =  0x01; // splash damage
float WEP_TYPE_HITSCAN	      =  0x02; // hitscan
float WEP_TYPEMASK            =  0x0F;
float WEP_FLAG_CANCLIMB       =  0x10; // can be used for movement
float WEP_FLAG_NORMAL         =  0x20; // in "most weapons" set
float WEP_FLAG_HIDDEN         =  0x40; // hides from menu
float WEP_FLAG_RELOADABLE     =  0x80; // can has reload
float WEP_FLAG_SUPERWEAPON    = 0x100; // powerup timer
float WEP_FLAG_MUTATORBLOCKED = 0x200; // hides from impulse 99 etc. (mutators are allowed to clear this flag)

float	IT_UNLIMITED_WEAPON_AMMO     = 1;
// when this bit is set, using a weapon does not reduce ammo. Checkpoints can give this powerup.
float	IT_UNLIMITED_SUPERWEAPONS    = 2;
// when this bit is set, superweapons don't expire. Checkpoints can give this powerup.
float   IT_CTF_SHIELDED              = 4; // set for the flag shield
float   IT_USING_JETPACK             = 8; // confirmation that button is pressed
float   IT_JETPACK                   = 16; // actual item
float   IT_FUEL_REGEN                = 32; // fuel regeneration trigger
float   IT_SHELLS                    = 256;
float   IT_NAILS                     = 512;
float   IT_ROCKETS                   = 1024;
float   IT_CELLS                     = 2048;
float   IT_SUPERWEAPON               = 4096;
float   IT_FUEL                      = 128;
float   IT_STRENGTH                  = 8192;
float   IT_INVINCIBLE                = 16384;
float   IT_HEALTH                    = 32768;
// union:
        // for items:
        float   IT_KEY1              = 131072;
        float   IT_KEY2              = 262144;
        // for players:
        float   IT_RED_FLAG_TAKEN    = 32768;
        float   IT_RED_FLAG_LOST     = 65536;
        float   IT_RED_FLAG_CARRING  = 98304;
        float   IT_BLUE_FLAG_TAKEN   = 131072;
        float   IT_BLUE_FLAG_LOST    = 262144;
        float   IT_BLUE_FLAG_CARRING = 393216;
// end
float   IT_5HP                       = 524288;
float   IT_25HP                      = 1048576;
float   IT_ARMOR_SHARD               = 2097152;
float   IT_ARMOR                     = 4194304;

float   IT_AMMO                      = 3968; // IT_SHELLS | IT_NAILS | IT_ROCKETS | IT_CELLS | IT_FUEL;
float   IT_PICKUPMASK                = 51; // IT_FUEL_REGEN | IT_JETPACK | IT_UNLIMITED_AMMO; // strength and invincible are handled separately
float   IT_UNLIMITED_AMMO            = 3; // IT_UNLIMITED_SUPERWEAPONS | IT_UNLIMITED_WEAPON_AMMO;

float AMMO_COUNT = 4; // amount of ammo types to show in the inventory panel

// variables:
string weaponorder_byid;

// functions:
entity get_weaponinfo(float id);
string W_FixWeaponOrder(string order, float complete);
string W_NameWeaponOrder(string order);
string W_NumberWeaponOrder(string order);

// ammo types
.float ammo_shells;
.float ammo_nails;
.float ammo_rockets;
.float ammo_cells;
.float ammo_fuel;
.float ammo_batteries; // dummy

// entity properties of weaponinfo:
.float weapon; // WEP_...
.string netname; // short name
.string message; // human readable name
.float items; // IT_...
.float(float) weapon_func; // w_...
.string mdl; // modelname without g_, v_, w_
.string model; // full name of g_ model
.float spawnflags; // WEPSPAWNFLAG_... combined
.float impulse; // weapon impulse
.float bot_pickupbasevalue; // bot weapon priority
.string model2; // wpn- sprite name
..float ammo_field; // main ammo field
// also, weaponinfo ents can act as a WEPSET

// dynamic weapon adding
float w_null(float dummy);
void register_weapon(float id, float(float) func, float ammotype, float i, float weapontype, float pickupbasevalue, string modelname, string shortname, string wname);
void register_weapons_done();

#define WEP_FIRST 1
float WEP_COUNT;
float WEP_LAST;

#if 1
# define WEP_MAXCOUNT 24
// default storage
.float _WS_weapons;
# define WEPSET_BIT(a)                  power2of((a) - WEP_FIRST)
# define WEPSET_DECLARE_A(a)            float _WS_##a
# define WEPSET_CLEAR_E(e)              ((e)._WS_weapons = 0)
# define WEPSET_CLEAR_A(a)              ((_WS_##a) = 0)
# define WEPSET_EMPTY_E(e)              ((e)._WS_weapons == 0)
# define WEPSET_EMPTY_A(a)              ((_WS_##a) == 0)
# define WEPSET_COPY_AS(a)              ((_WS_##a) = getstati(STAT_WEAPONS))
# define WEPSET_ADDSTAT()               addstat(STAT_WEAPONS, AS_INT, _WS_weapons)
# define WEPSET_OP1_EE(a,b,mergeop,x)   ((a)._WS_weapons x (b)._WS_weapons)
# define WEPSET_OP2_EE(a,b,mergeop,x,y) ((a)._WS_weapons x (b)._WS_weapons y (a)._WS_weapons)
# define WEPSET_OP1_EA(a,b,mergeop,x)   ((a)._WS_weapons x _WS_##b)
# define WEPSET_OP2_EA(a,b,mergeop,x,y) ((a)._WS_weapons x _WS_##b y (a)._WS_weapons)
# define WEPSET_OP1_EW(a,b,mergeop,x)   ((a)._WS_weapons x WEPSET_BIT(b))
# define WEPSET_OP2_EW(a,b,mergeop,x,y) ((a)._WS_weapons x WEPSET_BIT(b) y (a)._WS_weapons)
# define WEPSET_OP1_AE(a,b,mergeop,x)   (_WS_##a x (b)._WS_weapons)
# define WEPSET_OP2_AE(a,b,mergeop,x,y) (_WS_##a x (b)._WS_weapons y _WS_##a)
# define WEPSET_OP1_AA(a,b,mergeop,x)   (_WS_##a x _WS_##b)
# define WEPSET_OP2_AA(a,b,mergeop,x,y) (_WS_##a x _WS_##b y _WS_##a)
# define WEPSET_OP1_AW(a,b,mergeop,x)   (_WS_##a x WEPSET_BIT(b))
# define WEPSET_OP2_AW(a,b,mergeop,x,y) (_WS_##a x WEPSET_BIT(b) y _WS_##a)
#else
/*
-----BEGIN PGP MESSAGE-----
Version: GnuPG v1.4.12 (GNU/Linux)

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
=/PJI
-----END PGP MESSAGE-----
*/
#endif

#define XX ,

#define WEPSET_COPY_EE(a,b)            WEPSET_OP1_EE(a,b,XX,=)
#define WEPSET_EQ_EE(a,b)              WEPSET_OP1_EE(a,b,&&,==)
#define WEPSET_OR_EE(a,b)              WEPSET_OP1_EE(a,b,XX,|=)
#define WEPSET_AND_EE(a,b)             WEPSET_OP2_EE(a,b,XX,=,&)
#define WEPSET_ANDNOT_EE(a,b)          WEPSET_OP1_EE(a,b,XX,&~=)
#define WEPSET_CONTAINS_ANY_EE(a,b) !!(WEPSET_OP1_EE(a,b,||,&))
#define WEPSET_CONTAINS_ALL_EE(a,b)    WEPSET_OP2_EE(b,a,&&,==,&)

#define WEPSET_COPY_EA(a,b)            WEPSET_OP1_EA(a,b,XX,=)
#define WEPSET_EQ_EA(a,b)              WEPSET_OP1_EA(a,b,&&,==)
#define WEPSET_OR_EA(a,b)              WEPSET_OP1_EA(a,b,XX,|=)
#define WEPSET_AND_EA(a,b)             WEPSET_OP2_EA(a,b,XX,=,&)
#define WEPSET_ANDNOT_EA(a,b)          WEPSET_OP1_EA(a,b,XX,&~=)
#define WEPSET_CONTAINS_ANY_EA(a,b) !!(WEPSET_OP1_EA(a,b,||,&))
#define WEPSET_CONTAINS_ALL_EA(a,b)    WEPSET_OP2_EA(b,a,&&,==,&)

#define WEPSET_COPY_EW(a,b)            WEPSET_OP1_EW(a,b,XX,=)
#define WEPSET_EQ_EW(a,b)              WEPSET_OP1_EW(a,b,&&,==)
#define WEPSET_OR_EW(a,b)              WEPSET_OP1_EW(a,b,XX,|=)
#define WEPSET_AND_EW(a,b)             WEPSET_OP2_EW(a,b,XX,=,&)
#define WEPSET_ANDNOT_EW(a,b)          WEPSET_OP1_EW(a,b,XX,&~=)
#define WEPSET_CONTAINS_EW(a,b)     !!(WEPSET_OP1_EW(a,b,||,&))

#define WEPSET_COPY_AE(a,b)            WEPSET_OP1_AE(a,b,XX,=)
#define WEPSET_EQ_AE(a,b)              WEPSET_OP1_AE(a,b,&&,==)
#define WEPSET_OR_AE(a,b)              WEPSET_OP1_AE(a,b,XX,|=)
#define WEPSET_AND_AE(a,b)             WEPSET_OP2_AE(a,b,XX,=,&)
#define WEPSET_ANDNOT_AE(a,b)          WEPSET_OP1_AE(a,b,XX,&~=)
#define WEPSET_CONTAINS_ANY_AE(a,b) !!(WEPSET_OP1_AE(a,b,||,&))
#define WEPSET_CONTAINS_ALL_AE(a,b)    WEPSET_OP2_AE(b,a,&&,==,&)

#define WEPSET_COPY_AA(a,b)            WEPSET_OP1_AA(a,b,XX,=)
#define WEPSET_EQ_AA(a,b)              WEPSET_OP1_AA(a,b,&&,==)
#define WEPSET_OR_AA(a,b)              WEPSET_OP1_AA(a,b,XX,|=)
#define WEPSET_AND_AA(a,b)             WEPSET_OP2_AA(a,b,XX,=,&)
#define WEPSET_ANDNOT_AA(a,b)          WEPSET_OP1_AA(a,b,XX,&~=)
#define WEPSET_CONTAINS_ANY_AA(a,b) !!(WEPSET_OP1_AA(a,b,||,&))
#define WEPSET_CONTAINS_ALL_AA(a,b)    WEPSET_OP2_AA(b,a,&&,==,&)

#define WEPSET_COPY_AW(a,b)            WEPSET_OP1_AW(a,b,XX,=)
#define WEPSET_EQ_AW(a,b)              WEPSET_OP1_AW(a,b,&&,==)
#define WEPSET_OR_AW(a,b)              WEPSET_OP1_AW(a,b,XX,|=)
#define WEPSET_AND_AW(a,b)             WEPSET_OP2_AW(a,b,XX,=,&)
#define WEPSET_ANDNOT_AW(a,b)          WEPSET_OP1_AW(a,b,XX,&~=)
#define WEPSET_CONTAINS_AW(a,b)     !!(WEPSET_OP1_AW(a,b,||,&))

WEPSET_DECLARE_A(WEPBIT_ALL);
WEPSET_DECLARE_A(WEPBIT_SUPERWEAPONS);
// note: the fabs call is just there to hide "if result is constant" warning
#define REGISTER_WEAPON_2(id,func,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname) \
	float id; \
	float func(float); \
	void RegisterWeapons_##id() \
	{ \
		WEP_LAST = (id = WEP_FIRST + WEP_COUNT); \
		WEPSET_OR_AW(WEPBIT_ALL, id); \
		if(fabs(weapontype & WEP_FLAG_SUPERWEAPON)) \
			WEPSET_OR_AW(WEPBIT_SUPERWEAPONS, id); \
		++WEP_COUNT; \
		register_weapon(id,func,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname); \
	} \
	ACCUMULATE_FUNCTION(RegisterWeapons, RegisterWeapons_##id)
#ifdef MENUQC
#define REGISTER_WEAPON(id,func,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname) \
	REGISTER_WEAPON_2(WEP_##id,w_null,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname)
#else
#define REGISTER_WEAPON(id,func,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname) \
	REGISTER_WEAPON_2(WEP_##id,func,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname)
#endif

#include "../server/w_all.qc"

#undef REGISTER_WEAPON
ACCUMULATE_FUNCTION(RegisterWeapons, register_weapons_done)


string W_FixWeaponOrder(string order, float complete);
string W_NumberWeaponOrder(string order);
string W_NameWeaponOrder(string order);
string W_FixWeaponOrder_BuildImpulseList(string o);
string W_FixWeaponOrder_AllowIncomplete(string order);
string W_FixWeaponOrder_ForceComplete(string order);

void W_RandomWeapons(entity e, float n);
