#ifndef STATS_H
#define STATS_H

// Full list of all stat constants, included in a single location for easy reference
// 255 is the current limit (MAX_CL_STATS - 1), engine will need to be modified if you wish to add more stats

const int MAX_CL_STATS = 256;
#ifndef CSQC
const int STAT_HEALTH = 0; // .health
const int STAT_ARMOR = 4; // .armorvalue
const int STAT_SHELLS = 6; // .ammo_shells
const int STAT_NAILS = 7; // .ammo_nails
const int STAT_ROCKETS = 8; // .ammo_rockets
const int STAT_CELLS = 9; // .ammo_cells
const int STAT_ACTIVEWEAPON = 10; // .weapon
const int STAT_ITEMS = 15; // .items | .items2 << 23 | serverflags << 28
const int STAT_VIEWHEIGHT = 16; // .view_ofs_z
#endif

enum {
    STAT_WEAPONS = 32,
    STAT_WEAPONS2,
    STAT_WEAPONS3,

    STAT_WEAPONSINMAP,
    STAT_WEAPONSINMAP2,
    STAT_WEAPONSINMAP3,

    STAT_PL_VIEW_OFS1,
    STAT_PL_VIEW_OFS2,
    STAT_PL_VIEW_OFS3,

    STAT_PL_CROUCH_VIEW_OFS1,
    STAT_PL_CROUCH_VIEW_OFS2,
    STAT_PL_CROUCH_VIEW_OFS3,

    STAT_PL_MIN1,
    STAT_PL_MIN2,
    STAT_PL_MIN3,

    STAT_PL_MAX1,
    STAT_PL_MAX2,
    STAT_PL_MAX3,

    STAT_PL_CROUCH_MIN1,
    STAT_PL_CROUCH_MIN2,
    STAT_PL_CROUCH_MIN3,

    STAT_PL_CROUCH_MAX1,
    STAT_PL_CROUCH_MAX2,
    STAT_PL_CROUCH_MAX3,

    STAT_LAST_VECTOR
};

const int REGISTERED_STATS = 121;

REGISTER_STAT(KH_KEYS, int)
/** weapon requested to switch to; next WANTED weapon (for HUD) */
REGISTER_STAT(SWITCHWEAPON, int)
REGISTER_STAT(GAMESTARTTIME, float)
REGISTER_STAT(STRENGTH_FINISHED, float)
REGISTER_STAT(INVINCIBLE_FINISHED, float)
/** arc heat in [0,1] */
REGISTER_STAT(ARC_HEAT, float)
REGISTER_STAT(PRESSED_KEYS, int)
/** this stat could later contain some other bits of info, like, more server-side particle config */
REGISTER_STAT(ALLOW_OLDVORTEXBEAM, bool)
REGISTER_STAT(FUEL, int)
REGISTER_STAT(NB_METERSTART, float)
/** compressShotOrigin */
REGISTER_STAT(SHOTORG, int)
REGISTER_STAT(LEADLIMIT, float)
REGISTER_STAT(WEAPON_CLIPLOAD, int)
REGISTER_STAT(WEAPON_CLIPSIZE, int)

REGISTER_STAT(VORTEX_CHARGE, float)
REGISTER_STAT(LAST_PICKUP, float)
REGISTER_STAT(HUD, int)
REGISTER_STAT(VORTEX_CHARGEPOOL, float)
REGISTER_STAT(HIT_TIME, float)
REGISTER_STAT(DAMAGE_DEALT_TOTAL, int)
REGISTER_STAT(TYPEHIT_TIME, float)
REGISTER_STAT(LAYED_MINES, int)
REGISTER_STAT(HAGAR_LOAD, int)
REGISTER_STAT(SWITCHINGWEAPON, int)
REGISTER_STAT(SUPERWEAPONS_FINISHED, float)
REGISTER_STAT(VEHICLESTAT_HEALTH, int)
REGISTER_STAT(VEHICLESTAT_SHIELD, int)
REGISTER_STAT(VEHICLESTAT_ENERGY, int)
REGISTER_STAT(VEHICLESTAT_AMMO1, int)
REGISTER_STAT(VEHICLESTAT_RELOAD1, int)
REGISTER_STAT(VEHICLESTAT_AMMO2, int)
REGISTER_STAT(VEHICLESTAT_RELOAD2, int)
REGISTER_STAT(VEHICLESTAT_W2MODE, int)
REGISTER_STAT(NADE_TIMER, float)
REGISTER_STAT(SECRETS_TOTAL, float)
REGISTER_STAT(SECRETS_FOUND, float)
REGISTER_STAT(RESPAWN_TIME, float)
REGISTER_STAT(ROUNDSTARTTIME, float)
REGISTER_STAT(MONSTERS_TOTAL, int)
REGISTER_STAT(MONSTERS_KILLED, int)
REGISTER_STAT(BUFFS, int)
REGISTER_STAT(NADE_BONUS, float)
REGISTER_STAT(NADE_BONUS_TYPE, int)
REGISTER_STAT(NADE_BONUS_SCORE, float)
REGISTER_STAT(HEALING_ORB, float)
REGISTER_STAT(HEALING_ORB_ALPHA, float)
REGISTER_STAT(PLASMA, int)
REGISTER_STAT(OK_AMMO_CHARGE, float)
REGISTER_STAT(OK_AMMO_CHARGEPOOL, float)
REGISTER_STAT(FROZEN, int)
REGISTER_STAT(REVIVE_PROGRESS, float)
REGISTER_STAT(ROUNDLOST, int)
REGISTER_STAT(BUFF_TIME, float)
REGISTER_STAT(CTF_FLAGSTATUS, int)
REGISTER_STAT(MULTIJUMP_DODGING, int)
REGISTER_STAT(MULTIJUMP_MAXSPEED, float)
REGISTER_STAT(GAMEPLAYFIX_UPVELOCITYCLEARSONGROUND, int)
REGISTER_STAT(BUGRIGS_REVERSE_STOPPING, int)
REGISTER_STAT(BUGRIGS_REVERSE_SPINNING, int)
REGISTER_STAT(BUGRIGS_CAR_JUMPING, int)
REGISTER_STAT(BUGRIGS_FRICTION_AIR, float)
REGISTER_STAT(BUGRIGS_STEER, float)
REGISTER_STAT(BUGRIGS_SPEED_POW, float)
REGISTER_STAT(BUGRIGS_SPEED_REF, float)
REGISTER_STAT(BUGRIGS_ACCEL, float)
REGISTER_STAT(BUGRIGS_FRICTION_BRAKE, float)
REGISTER_STAT(BUGRIGS_AIR_STEERING, int)
REGISTER_STAT(BUGRIGS_FRICTION_FLOOR, float)
REGISTER_STAT(BUGRIGS_REVERSE_SPEEDING, int)
REGISTER_STAT(BUGRIGS_PLANAR_MOVEMENT, int)
REGISTER_STAT(BUGRIGS_ANGLE_SMOOTHING, int)
REGISTER_STAT(BUGRIGS, int)
REGISTER_STAT(GAMEPLAYFIX_STEPDOWN, int)
REGISTER_STAT(MOVEVARS_JUMPSTEP, int)
REGISTER_STAT(NOSTEP, int)
REGISTER_STAT(GAMEPLAYFIX_UNSTICKPLAYERS, int)
REGISTER_STAT(GAMEPLAYFIX_STEPMULTIPLETIMES, int)
REGISTER_STAT(GAMEPLAYFIX_DOWNTRACEONGROUND, int)
REGISTER_STAT(GAMEPLAYFIX_EASIERWATERJUMP, int)
REGISTER_STAT(MOVEVARS_FRICTION_SLICK, float)
REGISTER_STAT(MOVEVARS_FRICTION_ONLAND, float)
REGISTER_STAT(MOVEVARS_JUMPSPEEDCAP_DISABLE_ONRAMPS, int)
REGISTER_STAT(MOVEVARS_TRACK_CANJUMP, int)
REGISTER_STAT(DOUBLEJUMP, int)
REGISTER_STAT(MOVEVARS_CL_TRACK_CANJUMP, int)
REGISTER_STAT(MULTIJUMP_ADD, int)
REGISTER_STAT(MULTIJUMP_SPEED, float)
REGISTER_STAT(MULTIJUMP, int)
REGISTER_STAT(DODGING_TIMEOUT, float)
REGISTER_STAT(DODGING_WALL, int)
REGISTER_STAT(DODGING_UP_SPEED, float)
REGISTER_STAT(DODGING_RAMP_TIME, float)
REGISTER_STAT(DODGING_HEIGHT_THRESHOLD, float)
REGISTER_STAT(DODGING_DISTANCE_THRESHOLD, float)
REGISTER_STAT(DODGING_HORIZ_SPEED, float)
REGISTER_STAT(DODGING_DELAY, float)
REGISTER_STAT(DODGING_FROZEN_NO_DOUBLETAP, int)
REGISTER_STAT(DODGING_HORIZ_SPEED_FROZEN, float)
REGISTER_STAT(DODGING, int)
REGISTER_STAT(DODGING_FROZEN, int)
REGISTER_STAT(JETPACK_MAXSPEED_UP, float)
REGISTER_STAT(JETPACK_MAXSPEED_SIDE, float)
REGISTER_STAT(JETPACK_FUEL, float)
REGISTER_STAT(JETPACK_ANTIGRAVITY, float)
REGISTER_STAT(JETPACK_ACCEL_SIDE, float)
REGISTER_STAT(JETPACK_ACCEL_UP, float)
REGISTER_STAT(MOVEVARS_HIGHSPEED, float)

enum {
    STAT_FIRST_MAIN = (STAT_LAST_VECTOR - 1) + REGISTERED_STATS,

    STAT_LAST_MAIN
};

const int STAT_LAST = STAT_LAST_MAIN + 5;

/* The following stats change depending on the gamemode, so can share the same ID */

// freeze tag, clan arena, jailbreak
enum {
    STAT_REDALIVE = STAT_LAST_MAIN,
    STAT_BLUEALIVE,
    STAT_YELLOWALIVE,
    STAT_PINKALIVE,
};

// domination
enum {
    STAT_DOM_TOTAL_PPS = STAT_LAST_MAIN,
    STAT_DOM_PPS_RED,
    STAT_DOM_PPS_BLUE,
    STAT_DOM_PPS_YELLOW,
    STAT_DOM_PPS_PINK,
};

// vip
enum {
    STAT_VIP = STAT_LAST_MAIN,
    STAT_VIP_RED,
    STAT_VIP_BLUE,
    STAT_VIP_YELLOW,
    STAT_VIP_PINK,
};

// key hunt
enum {
    STAT_KH_REDKEY_TEAM = STAT_LAST_MAIN,
    STAT_KH_BLUEKEY_TEAM,
    STAT_KH_YELLOWKEY_TEAM,
    STAT_KH_PINKKEY_TEAM,
};

#define ASSERT_LESS(name, var, const) noref int name[(const - var + 1)];
ASSERT_LESS(stat_limit, STAT_LAST, 220)

#ifdef SVQC
void GlobalStats_update(entity e) {}
#define STAT_GLOBAL(T, x, expr) REGISTER_STAT(x, T); [[accumulate]] void GlobalStats_update(entity e) { STAT(x, e) = (expr); }
#include "movetypes/movetypes.qh"
#else
#define STAT_GLOBAL(T, x, expr) REGISTER_STAT(x, T)
#endif

REGISTER_STAT(MOVEVARS_AIRACCEL_QW_STRETCHFACTOR, float)
REGISTER_STAT(MOVEVARS_AIRCONTROL_PENALTY, float)
REGISTER_STAT(MOVEVARS_AIRSPEEDLIMIT_NONQW, float)
REGISTER_STAT(MOVEVARS_AIRSTRAFEACCEL_QW, float)
REGISTER_STAT(MOVEVARS_AIRCONTROL_POWER, float)
noref bool autocvar_sv_gameplayfix_nogravityonground;
STAT_GLOBAL(int, MOVEFLAGS, MOVEFLAG_VALID
                            | (autocvar_sv_gameplayfix_q2airaccelerate ? MOVEFLAG_Q2AIRACCELERATE : 0)
                            | (autocvar_sv_gameplayfix_nogravityonground ? MOVEFLAG_NOGRAVITYONGROUND : 0)
                            | (autocvar_sv_gameplayfix_gravityunaffectedbyticrate ? MOVEFLAG_GRAVITYUNAFFECTEDBYTICRATE : 0))
const int STAT_MOVEVARS_WARSOWBUNNY_AIRFORWARDACCEL   = 226;
const int STAT_MOVEVARS_WARSOWBUNNY_ACCEL             = 227;
const int STAT_MOVEVARS_WARSOWBUNNY_TOPSPEED          = 228;
const int STAT_MOVEVARS_WARSOWBUNNY_TURNACCEL         = 229;
const int STAT_MOVEVARS_WARSOWBUNNY_BACKTOSIDERATIO   = 230;
const int STAT_MOVEVARS_AIRSTOPACCELERATE             = 231;
const int STAT_MOVEVARS_AIRSTRAFEACCELERATE           = 232;
const int STAT_MOVEVARS_MAXAIRSTRAFESPEED             = 233;
const int STAT_MOVEVARS_AIRCONTROL                    = 234;
STAT_GLOBAL(float, FRAGLIMIT, autocvar_fraglimit)
STAT_GLOBAL(float, TIMELIMIT, autocvar_timelimit)
noref float autocvar_sv_wallfriction;
STAT_GLOBAL(int, MOVEVARS_WALLFRICTION, autocvar_sv_wallfriction)
const int STAT_MOVEVARS_FRICTION                      = 238;
STAT_GLOBAL(float, MOVEVARS_TICRATE, autocvar_sys_ticrate)
STAT_GLOBAL(float, MOVEVARS_TIMESCALE, autocvar_slowmo)
STAT_GLOBAL(float, MOVEVARS_GRAVITY, autocvar_sv_gravity)
const int STAT_MOVEVARS_STOPSPEED                     = 243;
const int STAT_MOVEVARS_MAXSPEED                      = 244;
const int STAT_MOVEVARS_ACCELERATE                    = 246;
const int STAT_MOVEVARS_AIRACCELERATE                 = 247;
.float gravity;
STAT_GLOBAL(float, MOVEVARS_ENTGRAVITY, (e.gravity) ? e.gravity : 1)
const int STAT_MOVEVARS_JUMPVELOCITY                  = 250;
const int STAT_MOVEVARS_MAXAIRSPEED                   = 252;
STAT_GLOBAL(float, MOVEVARS_STEPHEIGHT, autocvar_sv_stepheight)
const int STAT_MOVEVARS_AIRACCEL_QW                   = 254;
const int STAT_MOVEVARS_AIRACCEL_SIDEWAYS_FRICTION    = 255;
#endif
