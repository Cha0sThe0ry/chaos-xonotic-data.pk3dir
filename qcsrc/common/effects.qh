#ifndef P_EFFECTS_H
#define P_EFFECTS_H

.int eent_net_name; // id
.vector eent_net_location;
.vector eent_net_velocity;
.int eent_eff_trail;
.string eent_eff_name;
.int eent_net_count;

#ifdef CSQC
void Read_Effect(bool is_new);
#elif defined(SVQC)
void Send_Effect(string eff_name, vector eff_loc, vector eff_vel, int eff_cnt);
#endif

const int EFFECT_FIRST = 1;
int EFFECT_COUNT;

const int MAX_EFFECTS = 512;
entity effects_ent[MAX_EFFECTS];

void Create_Effect_Entity(int eff_name, string eff_string, int eff_trail);

#define EFFECT(istrail,name,realname) \
    int name; \
    void RegisterEffect_##name() \
    { \
        SET_FIELD_COUNT(name, EFFECT_FIRST, EFFECT_COUNT) \
        CHECK_MAX_COUNT(name, MAX_EFFECTS, EFFECT_COUNT, "EFFECT") \
        Create_Effect_Entity(name, realname, istrail); \
    } \
    ACCUMULATE_FUNCTION(RegisterEffects, RegisterEffect_##name);

void RegisterEffects_First()
{
    #ifdef SVQC
    #define dedi (server_is_dedicated ? "a dedicated " : "")
    #else
    #define dedi ""
    #endif

    LOG_TRACEF("Beginning effect initialization on %s%s program...\n", dedi, PROGNAME);
    #undef dedi
}

void RegisterEffects_Done()
{
    LOG_TRACE("Effects initialization successful!\n");
}

// NOW we actually activate the declarations
ACCUMULATE_FUNCTION(RegisterEffects, RegisterEffects_First);
#include "effects.inc"
ACCUMULATE_FUNCTION(RegisterEffects, RegisterEffects_Done);
#undef EFFECT

#endif
