#ifndef ENT_CS_H
#define ENT_CS_H

REGISTER_NET_LINKED(ENT_CLIENT_ENTCS)

/** True when private information such as origin is available */
.bool m_entcs_private;
/** True when origin is available */
.bool has_origin;
/** True when a recent server sent origin has been received */
.bool has_sv_origin;

#ifdef SVQC
/**
 * The point of these entities is to avoid the problems
 * with clientprediction.
 * If you add SendEntity to players, the engine will not
 * do any prediction anymore, and you'd have to write the whole
 * prediction code in CSQC, you want that? :P
 * Data can depend on gamemode. For now, it serves as GPS entities
 * in onslaught... YAY ;)
 */

.entity entcs;

bool entcs_send(entity this, entity to, int sf);

void entcs_think();

void entcs_attach(entity e);

void entcs_detach(entity e);

.int m_forceupdate;

/** Force an origin update, for player sounds */
#define entcs_force_origin(e) ((e).entcs.m_forceupdate = BIT(2))

#endif

#ifdef CSQC

entity entcs_receiver[255]; // 255 is the engine limit on maxclients
#define entcs_is_self(e) ((e).sv_entnum + 1 == player_localentnum)

#endif

#endif
