#ifdef SVQC

// time the player was alive and kicking
const string PLAYERSTATS_ALIVETIME  = "alivetime";
const string PLAYERSTATS_AVGLATENCY = "avglatency";
const string PLAYERSTATS_WINS = "wins";
const string PLAYERSTATS_MATCHES = "matches";
const string PLAYERSTATS_JOINS = "joins";
const string PLAYERSTATS_SCOREBOARD_VALID = "scoreboardvalid";
const string PLAYERSTATS_RANK = "rank";
const string PLAYERSTATS_SCOREBOARD_POS = "scoreboardpos";

const string PLAYERSTATS_TOTAL = "total-";
const string PLAYERSTATS_SCOREBOARD = "scoreboard-";

const string PLAYERSTATS_ACHIEVEMENT_KILL_SPREE_3 = "achievement-kill-spree-3";
const string PLAYERSTATS_ACHIEVEMENT_KILL_SPREE_5 = "achievement-kill-spree-5";
const string PLAYERSTATS_ACHIEVEMENT_KILL_SPREE_10 = "achievement-kill-spree-10";
const string PLAYERSTATS_ACHIEVEMENT_KILL_SPREE_15 = "achievement-kill-spree-15";
const string PLAYERSTATS_ACHIEVEMENT_KILL_SPREE_20 = "achievement-kill-spree-20";
const string PLAYERSTATS_ACHIEVEMENT_KILL_SPREE_25 = "achievement-kill-spree-25";
const string PLAYERSTATS_ACHIEVEMENT_KILL_SPREE_30 = "achievement-kill-spree-30";
const string PLAYERSTATS_ACHIEVEMENT_BOTLIKE = "achievement-botlike";
const string PLAYERSTATS_ACHIEVEMENT_FIRSTBLOOD = "achievement-firstblood";
const string PLAYERSTATS_ACHIEVEMENT_FIRSTVICTIM = "achievement-firstvictim";

// delay map switch until this is set
float PlayerStats_GameReport_DelayMapVote;

// call at initialization
void PlayerStats_GameReport_Init();

// add a new player
void PlayerStats_GameReport_AddPlayer(entity e);

// add a new team
void PlayerStats_GameReport_AddTeam(float t);

// add a new event
void PlayerStats_GameReport_AddEvent(string event_id);

// call on each event to track, or at player disconnect OR match end for "global stuff"
#define PS_GR_P_ADDVAL(ent,eventid,val) PlayerStats_GameReport_Event(ent.playerstats_id, eventid, val)
#define PS_GR_T_ADDVAL(team,eventid,val) PlayerStats_GameReport_Event(sprintf("team#%d", team), eventid, val)
float PlayerStats_GameReport_Event(string prefix, string event_id, float value);

void PlayerStats_GameReport_Accuracy(entity p);

// call this whenever a player leaves
void PlayerStats_GameReport_FinalizePlayer(entity p);

// call this at the end of the match
void PlayerStats_GameReport(float finished);

void PlayerStats_GameReport_Handler(entity fh, entity pass, float status);

.string playerstats_id;

//string autocvar_g_playerstats_uri;

string autocvar_g_playerstats_gamereport_ladder;
var string autocvar_g_playerstats_gamereport_uri = "-";

#endif //SVQC
#ifdef MENUQC
var string autocvar_g_playerstats_playerdetail_uri = "http://stats.xonotic.org/player/me";
void PlayerStats_PlayerDetail();
#endif


/*
//// WIP -zykure /////////////////////////////////////////////////////


//const string playerinfo_uri = "http://localhost:6543"; // FIXME

string PlayerInfo_GetItem(entity e, string item_id);
string PlayerInfo_GetItemLocal(string item_id);

void PlayerInfo_Init();
#ifdef SVQC
string autocvar_g_playerinfo_uri;
void PlayerInfo_Basic(entity p);
#endif
#ifdef MENUQC
string autocvar_g_playerinfo_uri;
void PlayerInfo_Details();
#endif
#ifdef CSQC

//void PlayerInfo_Details();
#endif
*/
