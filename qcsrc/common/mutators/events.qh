#ifndef COMMON_MUTATORS_EVENTS_H
#define COMMON_MUTATORS_EVENTS_H

#define EV_NO_ARGS(i, o)

#pragma noref 1
string ret_string;

#define MUTATOR_TYPES(_, x) \
    _(x, bool) \
    _(x, int) \
    _(x, entity) \
    _(x, float) \
    _(x, vector) \
    _(x, string) \
    /**/

#define MUTATOR_NEWGLOBAL(x, type) type mutator_argv_##type##_##x;

MUTATOR_TYPES(MUTATOR_NEWGLOBAL, 0)
MUTATOR_TYPES(MUTATOR_NEWGLOBAL, 1)

#undef MUTATOR_TYPES
#undef MUTATOR_NEWGLOBAL

#pragma noref 0

/** appends ":mutatorname" to ret_string for logging */
#define EV_BuildMutatorsString(i, o) \
    /**/ i(string, ret_string) \
    /**/ o(string, ret_string) \
    /**/
MUTATOR_HOOKABLE(BuildMutatorsString, EV_BuildMutatorsString);

/** appends ", Mutator name" to ret_string for display */
#define EV_BuildMutatorsPrettyString(i, o) \
    /**/ i(string, ret_string) \
    /**/ o(string, ret_string) \
    /**/
MUTATOR_HOOKABLE(BuildMutatorsPrettyString, EV_BuildMutatorsPrettyString);

string cmd_name;
int cmd_argc;
string cmd_string;

/**
 * Called when a game command is parsed
 * NOTE: hooks MUST start with if (MUTATOR_RETURNVALUE) return false;
 * NOTE: return true if you handled the command, return false to continue handling
 * NOTE: THESE HOOKS MUST NEVER EVER CALL tokenize()
 * // example:
 * MUTATOR_HOOKFUNCTION(foo, GameCommand) {
 *     if (MUTATOR_RETURNVALUE) return false; // command was already handled
 *     if (cmd_name == "echocvar" && cmd_argc >= 2) {
 *         print(cvar_string(argv(1)), "\n");
 *         return true;
 *     }
 *     if (cmd_name == "echostring" && cmd_argc >= 2) {
 *         print(substring(cmd_string, argv_start_index(1), argv_end_index(-1) - argv_start_index(1)), "\n");
 *         return true;
 *     }
 *     return false;
 * }
 */
#define EV_GameCommand(i, o) \
    /** command name */ i(string, cmd_name) \
    /** also, argv() can be used */ i(int, cmd_argc) \
    /** whole command, use only if you really have to */ i(string, cmd_string) \
    /**/
MUTATOR_HOOKABLE(GameCommand, EV_GameCommand);

#endif
