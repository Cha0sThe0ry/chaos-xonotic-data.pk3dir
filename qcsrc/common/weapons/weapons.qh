#ifndef MENUQC
#include "calculations.qh"
#endif

const float BOT_PICKUP_RATING_LOW	= 2500;
const float BOT_PICKUP_RATING_MID	= 5000;
const float BOT_PICKUP_RATING_HIGH	= 10000;

const float WEP_TYPE_OTHER	      =  0x00; // not for damaging people
const float WEP_TYPE_SPLASH	      =  0x01; // splash damage
const float WEP_TYPE_HITSCAN	      =  0x02; // hitscan
const float WEP_TYPEMASK            =  0x0F;
const float WEP_FLAG_CANCLIMB       =  0x10; // can be used for movement
const float WEP_FLAG_NORMAL         =  0x20; // in "most weapons" set
const float WEP_FLAG_HIDDEN         =  0x40; // hides from menu
const float WEP_FLAG_RELOADABLE     =  0x80; // can has reload
const float WEP_FLAG_SUPERWEAPON    = 0x100; // powerup timer
const float WEP_FLAG_MUTATORBLOCKED = 0x200; // hides from impulse 99 etc. (mutators are allowed to clear this flag)

const float MAX_SHOT_DISTANCE = 32768;

// weapon requests // WEAPONTODO
#define WR_SETUP          1 // (SERVER) setup weapon data
#define WR_THINK          2 // (SERVER) logic to run every frame
#define WR_CHECKAMMO1     3 // (SERVER) checks ammo for weapon
#define WR_CHECKAMMO2     4 // (SERVER) checks ammo for weapon
#define WR_AIM            5 // (SERVER) runs bot aiming code for this weapon
#define WR_INIT           6 // (BOTH) precaches models/sounds used by this weapon
#define WR_SUICIDEMESSAGE 7 // (SERVER) notification number for suicide message (may inspect w_deathtype for details)
#define WR_KILLMESSAGE    8 // (SERVER) notification number for kill message (may inspect w_deathtype for details)
#define WR_RELOAD         9 // (SERVER) does not need to do anything
#define WR_RESETPLAYER    10 // (SERVER) does not need to do anything
#define WR_IMPACTEFFECT   11 // (CLIENT) impact effect
#define WR_SWITCHABLE     12 // (CLIENT) impact effect
#define WR_PLAYERDEATH    13 // (SERVER) does not need to do anything
#define WR_GONETHINK      14 // (SERVER) logic to run every frame, also if no longer having the weapon as long as the switch away has not been performed
#define WR_CONFIG         15 // (ALL) 

// WEAPONTODO
const float	IT_UNLIMITED_WEAPON_AMMO     = 1;
// when this bit is set, using a weapon does not reduce ammo. Checkpoints can give this powerup.
const float	IT_UNLIMITED_SUPERWEAPONS    = 2;
// when this bit is set, superweapons don't expire. Checkpoints can give this powerup.
const float   IT_CTF_SHIELDED              = 4; // set for the flag shield
const float   IT_USING_JETPACK             = 8; // confirmation that button is pressed
const float   IT_JETPACK                   = 16; // actual item
const float   IT_FUEL_REGEN                = 32; // fuel regeneration trigger
WANT_CONST float   IT_SHELLS                    = 256;
WANT_CONST float   IT_NAILS                     = 512;
WANT_CONST float   IT_ROCKETS                   = 1024;
WANT_CONST float   IT_CELLS                     = 2048;
const float   IT_SUPERWEAPON               = 4096;
const float   IT_FUEL                      = 128;
const float   IT_STRENGTH                  = 8192;
const float   IT_INVINCIBLE                = 16384;
const float   IT_HEALTH                    = 32768;
// union:
	// for items:
	WANT_CONST float	IT_KEY1					= 131072;
	WANT_CONST float	IT_KEY2					= 262144;
	// for players:
	const float	IT_RED_FLAG_TAKEN		= 32768;
	const float	IT_RED_FLAG_LOST		= 65536;
	const float	IT_RED_FLAG_CARRYING		= 98304;
	const float	IT_BLUE_FLAG_TAKEN		= 131072;
	const float	IT_BLUE_FLAG_LOST		= 262144;
	const float	IT_BLUE_FLAG_CARRYING	= 393216;
// end
const float   IT_5HP                       = 524288;
const float   IT_25HP                      = 1048576;
const float   IT_ARMOR_SHARD               = 2097152;
const float   IT_ARMOR                     = 4194304;

const float   IT_AMMO                      = 3968; // IT_SHELLS | IT_NAILS | IT_ROCKETS | IT_CELLS | IT_FUEL;
const float   IT_PICKUPMASK                = 51; // IT_FUEL_REGEN | IT_JETPACK | IT_UNLIMITED_AMMO; // strength and invincible are handled separately
const float   IT_UNLIMITED_AMMO            = 3; // IT_UNLIMITED_SUPERWEAPONS | IT_UNLIMITED_WEAPON_AMMO;

const float AMMO_COUNT = 4; // amount of ammo types to show in the inventory panel

// variables:
string weaponorder_byid;

// Weapon sets
typedef vector WepSet;
WepSet WepSet_FromWeapon(float a);
#ifdef SVQC
void WepSet_AddStat();
void WriteWepSet(float dest, WepSet w);
#endif
#ifdef CSQC
WepSet WepSet_GetFromStat();
WepSet ReadWepSet();
#endif

// Weapon name macros
#define WEP_FIRST 1
#define WEP_MAXCOUNT 24 // Increase as needed. Can be up to three times as much.
float WEP_COUNT;
float WEP_LAST;
WepSet WEPSET_ALL;
WepSet WEPSET_SUPERWEAPONS;

// functions:
entity get_weaponinfo(float id);
string W_FixWeaponOrder(string order, float complete);
string W_NameWeaponOrder(string order);
string W_NumberWeaponOrder(string order);
string W_FixWeaponOrder_BuildImpulseList(string o);
string W_FixWeaponOrder_AllowIncomplete(string order);
string W_FixWeaponOrder_ForceComplete(string order);

void W_RandomWeapons(entity e, float n);

string W_Name(float weaponid);

float W_AmmoItemCode(float wpn);


// ammo types
.float ammo_shells;
.float ammo_nails;
.float ammo_rockets;
.float ammo_cells;
.float ammo_fuel;
.float ammo_none;

// entity properties of weaponinfo:
.float weapon; // WEP_...
.WepSet weapons; // WEPSET_...
.string netname; // short name
.string message; // human readable name
.float items; // IT_...
.float(float) weapon_func; // w_...
.string mdl; // modelname without g_, v_, w_
.string model; // full name of g_ model
.float spawnflags; // WEPSPAWNFLAG_... combined
.float impulse; // weapon impulse
.float bot_pickupbasevalue; // bot weapon priority
.string model2; // wpn- sprite name
..float current_ammo; // main ammo field

// other useful macros
#define WEP_ACTION(wpn,wrequest) (get_weaponinfo(wpn)).weapon_func(wrequest)
#define AMMO_VAL(wpn) ((get_weaponinfo(wpn)).current_ammo)

// =====================
//  Weapon Registration
// =====================

// create cvars for weapon settings
#define WEP_ADD_CVAR_NONE(wepname,name) final float autocvar_g_balance_##wepname##_##name;

#define WEP_ADD_CVAR_PRI(wepname,name) WEP_ADD_CVAR_NONE(wepname, primary_##name)
#define WEP_ADD_CVAR_SEC(wepname,name) WEP_ADD_CVAR_NONE(wepname, secondary_##name)
#define WEP_ADD_CVAR_BOTH(wepname,name) \
	WEP_ADD_CVAR_PRI(wepname, name) \
	WEP_ADD_CVAR_SEC(wepname, name)
	
#define WEP_ADD_CVAR(wepid,wepname,mode,name) WEP_ADD_CVAR_##mode(wepname, name)

// create properties for weapon settings
#define WEP_ADD_PROP(wepid,wepname,type,prop,name) \
	.type ##prop; \
	final type autocvar_g_balance_##wepname##_##name;

// read cvars from weapon settings
#define WEP_CVAR(wepname,name) autocvar_g_balance_##wepname##_##name
#define WEP_CVAR_PRI(wepname,name) WEP_CVAR(wepname, primary_##name)
#define WEP_CVAR_SEC(wepname,name) WEP_CVAR(wepname, secondary_##name)
#define WEP_CVAR_BOTH(wepname,isprimary,name) ((isprimary) ? WEP_CVAR_PRI(wepname, name) : WEP_CVAR_SEC(wepname, name))

// set initialization values for weapon settings
#define WEP_SKIPCVAR(unuseda,unusedb,unusedc,unusedd) /* skip cvars */
#define WEP_SET_PROP(wepid,wepname,type,prop,name) get_weaponinfo(WEP_##wepid).##prop = autocvar_g_balance_##wepname##_##name;

float w_null(float dummy);
void register_weapon(float id, WepSet bit, float(float) func, .float ammotype, float i, float weapontype, float pickupbasevalue, string modelname, string shortname, string wname);
void register_weapons_done();

// note: the fabs call is just there to hide "if result is constant" warning
#define REGISTER_WEAPON_2(id,bit,func,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname) \
	float id; \
	WepSet bit; \
	float func(float); \
	void RegisterWeapons_##id() \
	{ \
		WEP_LAST = (id = WEP_FIRST + WEP_COUNT); \
		bit = WepSet_FromWeapon(id); \
		WEPSET_ALL |= bit; \
		if((weapontype) & WEP_FLAG_SUPERWEAPON) \
			WEPSET_SUPERWEAPONS |= bit; \
		++WEP_COUNT; \
		register_weapon(id,bit,func,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname); \
	} \
	ACCUMULATE_FUNCTION(RegisterWeapons, RegisterWeapons_##id)
#ifdef MENUQC
#define REGISTER_WEAPON(id,func,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname) \
	REGISTER_WEAPON_2(WEP_##id,WEPSET_##id,w_null,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname)
#else
#define REGISTER_WEAPON(id,func,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname) \
	REGISTER_WEAPON_2(WEP_##id,WEPSET_##id,func,ammotype,i,weapontype,pickupbasevalue,modelname,shortname,wname)
#endif

#include "all.qh"

#undef WEP_ADD_CVAR_MO_PRI
#undef WEP_ADD_CVAR_MO_SEC
#undef WEP_ADD_CVAR_MO_BOTH
#undef WEP_ADD_CVAR_MO_NONE
#undef WEP_ADD_CVAR
#undef WEP_ADD_PROP
#undef REGISTER_WEAPON

ACCUMULATE_FUNCTION(RegisterWeapons, register_weapons_done);
