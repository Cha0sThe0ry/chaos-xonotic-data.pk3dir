#ifndef TEAMS_H
#define TEAMS_H

REGISTRY(Teams, BITS(5))
REGISTER_REGISTRY(Teams)
REGISTRY_CHECK(Teams)

CLASS(Team, Object)
    ATTRIB(Team, m_name, string, string_null)
    ATTRIB(Team, m_name_nonls, string, string_null)
    ATTRIB(Team, m_playercolor, int, 0)
    ATTRIB(Team, m_colorstr, string, string_null)
    ATTRIB(Team, m_color, vector, '0 0 0')
    .int Team_id;
    CONSTRUCTOR(Team, string _name, string _name_nonls, int _playercolor, string _colorstr, vector _color) {
        CONSTRUCT(Team);
        #ifndef CSQC
        _playercolor++;
        #endif
        this.Team_id = _playercolor; // for team numbers that aren't stupid, use `this.m_id`

        this.m_name = _name;
        this.m_name_nonls = _name_nonls;
        this.m_playercolor = _playercolor;
        this.m_colorstr = _colorstr;
        this.m_color = _color;
    }
ENDCLASS(Team)

#define TEAM(id, ...) REGISTER(Teams, id, m_id, NEW(Team, __VA_ARGS__))

TEAM(TEAM_1,    _("Red"),       "Red",      4,      "^1", '1      0.0625 0.0625'); // 0xFF0F0F
TEAM(TEAM_2,    _("Blue"),      "Blue",     13,     "^4", '0.0625 0.0625 1     '); // 0x0F0FFF
TEAM(TEAM_3,    _("Yellow"),    "Yellow",   12,     "^3", '1      1      0.0625'); // 0xFFFF0F
TEAM(TEAM_4,    _("Pink"),      "Pink",     9,      "^6", '1      0.0625 1     '); // 0xFF0FFF
TEAM(TEAM_SPEC, _("Neutral"),   "Neutral",  1337,   "^7", '0      0      0     ');

#define NUM_TEAM_1 (TEAM_1.m_playercolor)
#define NUM_TEAM_2 (TEAM_2.m_playercolor)
#define NUM_TEAM_3 (TEAM_3.m_playercolor)
#define NUM_TEAM_4 (TEAM_4.m_playercolor)
#define NUM_SPECTATOR (TEAM_SPEC.m_playercolor)

#define COL_TEAM_1 (TEAM_1.m_colorstr)
#define COL_TEAM_2 (TEAM_2.m_colorstr)
#define COL_TEAM_3 (TEAM_3.m_colorstr)
#define COL_TEAM_4 (TEAM_4.m_colorstr)
/** must be #defined, const globals drop the translation attribute */
#define NAME_TEAM _("Team")
#define NAME_TEAM_1 (TEAM_1.m_name)
#define NAME_TEAM_2 (TEAM_2.m_name)
#define NAME_TEAM_3 (TEAM_3.m_name)
#define NAME_TEAM_4 (TEAM_4.m_name)
#define NAME_NEUTRAL (TEAM_SPEC.m_name)

// used for replacement in filenames or such where the name CANNOT be allowed to be translated
#define STATIC_NAME_TEAM_1 (TEAM_1.m_name_nonls)
#define STATIC_NAME_TEAM_2 (TEAM_2.m_name_nonls)
#define STATIC_NAME_TEAM_3 (TEAM_3.m_name_nonls)
#define STATIC_NAME_TEAM_4 (TEAM_4.m_name_nonls)

#ifdef CSQC
float teamplay;
float myteam;
#endif

Team TM(int teamid) {
    if (teamid == 0) return NULL;
    FOREACH(Teams, it.Team_id == teamid, return it);
    LOG_SEVEREF("Unknown team: %d", teamid);
    return NULL;
}

#define Team_ColorCode(this) (TM(this).m_colorstr)

#define Team_ColorRGB(this) (TM(this).m_color)

#define Team_ColorName(this) (TM(this).m_name_nonls)

// used for replacement in filenames or such where the name CANNOT be allowed to be translated
#define Static_Team_ColorName(this) (TM(this).m_name)

int Team_ColorToTeam(string team_color)
{
	switch(strtolower(team_color))
	{
		case "red": return NUM_TEAM_1;
    	case "blue": return NUM_TEAM_2;
    	case "yellow": return NUM_TEAM_3;
    	case "pink": return NUM_TEAM_4;
    	case "auto": return 0;
	}

	return -1;
}

int Team_NumberToTeam(int number)
{
	switch(number)
	{
		case 1: return NUM_TEAM_1;
		case 2: return NUM_TEAM_2;
		case 3: return NUM_TEAM_3;
		case 4: return NUM_TEAM_4;
	}

	return -1;
}

int Team_TeamToNumber(int teamid)
{
	switch(teamid)
	{
		case NUM_TEAM_1: return 1;
		case NUM_TEAM_2: return 2;
		case NUM_TEAM_3: return 3;
		case NUM_TEAM_4: return 4;
	}

	return -1;
}


// legacy aliases for shitty code
#define ColorByTeam(number) Team_NumberToTeam(number + 1)

// useful aliases
#define Team_ColorName_Lower(teamid) strtolower(Team_ColorName(teamid))
#define Team_ColorName_Upper(teamid) strtoupper(Team_ColorName(teamid))

// used for replacement in filenames or such where the name CANNOT be allowed to be translated
#define Static_Team_ColorName_Lower(teamid) strtolower(Static_Team_ColorName(teamid))
#define Static_Team_ColorName_Upper(teamid) strtoupper(Static_Team_ColorName(teamid))

#define Team_FullName(teamid) strcat(Team_ColorName(teamid), " ", NAME_TEAM, "^7")
#define Team_ColoredFullName(teamid) strcat(Team_ColorCode(teamid), Team_ColorName(teamid), " ", NAME_TEAM, "^7")

#define Team_NumberToFullName(number) Team_FullName(Team_NumberToTeam(number))
#define Team_NumberToColoredFullName(number) Team_ColoredFullName(Team_NumberToTeam(number))

// replace these flags in a string with the strings provided
#define TCR(input,teamcolor,teamtext) strreplace("^TC", teamcolor, strreplace("^TT", teamtext, input))

// safe team comparisons
#define SAME_TEAM(a,b) (teamplay ? (a.team == b.team) : (a == b))
#define DIFF_TEAM(a,b) (teamplay ? (a.team != b.team) : (a != b))

#endif
