#ifndef SERVER_ALL_H
#define SERVER_ALL_H

int maxclients;

const string STR_PLAYER = "player";
const string STR_SPECTATOR = "spectator";
const string STR_OBSERVER = "observer";

#define IS_PLAYER(v) ((v).classname == STR_PLAYER)
#define IS_SPEC(v) ((v).classname == STR_SPECTATOR)
#define IS_OBSERVER(v) ((v).classname == STR_OBSERVER)

#define IS_CLIENT(v) (v.flags & FL_CLIENT)
#define IS_BOT_CLIENT(v) (clienttype(v) == CLIENTTYPE_BOT)
#define IS_REAL_CLIENT(v) (clienttype(v) == CLIENTTYPE_REAL)
#define IS_NOT_A_CLIENT(v) (clienttype(v) == CLIENTTYPE_NOTACLIENT)

#define IS_MONSTER(v) (v.flags & FL_MONSTER)
#define IS_VEHICLE(v) (v.vehicle_flags & VHF_ISVEHICLE)
#define IS_TURRET(v) (v.turret_flags & TUR_FLAG_ISTURRET)

#define FOR_EACH_CLIENTSLOT(v) for (v = world; (v = nextent(v)) && (num_for_edict(v) <= maxclients); )
#define FOR_EACH_CLIENT(v) FOR_EACH_CLIENTSLOT(v) if (IS_CLIENT(v))
#define FOR_EACH_REALCLIENT(v) FOR_EACH_CLIENT(v) if (IS_REAL_CLIENT(v))

#define FOR_EACH_PLAYER(v) FOR_EACH_CLIENT(v) if (IS_PLAYER(v))
#define FOR_EACH_SPEC(v) FOR_EACH_CLIENT(v) if (IS_SPEC(v))
#define FOR_EACH_OBSERVER(v) FOR_EACH_CLIENT(v) if (IS_OBSERVER(v))
#define FOR_EACH_REALPLAYER(v) FOR_EACH_REALCLIENT(v) if (IS_PLAYER(v))

#define FOREACH_CLIENT(cond, body) \
	MACRO_BEGIN { \
		int i = 0; \
		for (entity it = NULL; (it = nextent(it)) && (num_for_edict(it) <= maxclients); ++i) \
		{ \
			if (!IS_CLIENT(it)) continue; \
			if (cond) { LAMBDA(body) } \
		} \
	} MACRO_END

#define FOR_EACH_MONSTER(v) for (v = world; (v = findflags(v, flags, FL_MONSTER)) != world; )

#include "../common/effects/all.qh"
#include "../common/models/all.qh"
#include "../common/sounds/all.qh"

#include "autocvars.qh"
#include "constants.qh"
#include "defs.qh"
#include "miscfunctions.qh"

#endif
