#pragma once

#include <common/weapons/_all.qh>
#include <common/stats.qh>

// Globals

float g_footsteps, g_grappling_hook;
float g_warmup_allguns;
float g_warmup_allow_timeout;
float warmup_stage;
float g_jetpack;

bool sv_ready_restart;
bool sv_ready_restart_after_countdown;
bool sv_ready_restart_repeatable;

float sv_clones;
float sv_foginterval;

// Fields

//.string	wad;
//.string	map;

//.float	worldtype;

.float	pain_finished;			//Added by Supajoe
.float	pain_frame;			//"

.float cnt; // used in too many places
.float count;
//.float cnt2;

.float fade_time;
.float fade_rate;

.string mdl;

.string playermodel;
.string playerskin;

.float species;

.float	scheduledrespawntime;
.float	respawntime;
.float	respawntimejitter;
.float	respawntimestart;
//.float	chasecam;

//.float          gravity;

.float		dmg;

// for railgun damage (hitting multiple enemies)
.bool railgunhit;
.float railgunhitsolidbackup;
.vector railgunhitloc;

.float		dmgtime;

.float		killcount;
.float damage_dealt, typehitsound, killsound;

// string overrides entity
.string item_pickupsound;
.entity item_pickupsound_ent;
.entity item_model_ent;

.float winning;

.float spawnshieldtime;

.int playerid;
.float noalign;		// if set to 1, the item or spawnpoint won't be dropped to the floor

.vector death_origin;

float default_player_alpha;
float default_weapon_alpha;

.int team_saved;

bool some_spawn_has_been_used;
int have_team_spawns; // 0 = no team spawns requested, -1 = team spawns requested but none found, 1 = team spawns requested and found
int have_team_spawns_forteams; // if Xth bit is 1 then team X has spawns else it has no spawns; team 0 is the "no-team"

.bool canteamdamage;

int autocvar__independent_players;
bool independent_players;
#define INDEPENDENT_PLAYERS (autocvar__independent_players ? (autocvar__independent_players > 0) : independent_players)
#define IS_INDEPENDENT_PLAYER(e) ((e).solid == SOLID_TRIGGER)
#define MAKE_INDEPENDENT_PLAYER(e) (((e).solid = SOLID_TRIGGER), ((e).frags = FRAGS_PLAYER_OUT_OF_GAME))

string clientstuff;
.float phase;
.int pressedkeys;

.string fog;

string cvar_changes;
string cvar_purechanges;
float cvar_purechanges_count;

//float game_starttime; //point in time when the countdown to game start is over
//float round_starttime; //point in time when the countdown to round start is over

.int projectiledeathtype;

.string message2;

// reset to 0 on weapon switch
// may be useful to all weapons
.float bulletcounter;

// Nexball
float g_nexball_meter_period;

.void(entity this) reset; // if set, an entity is reset using this
.void(entity this) reset2; // if set, an entity is reset using this (after calling ALL the reset functions for other entities)

.bool wasplayer;

string matchid;

.int minelayer_mines;
.float vortex_charge;
.float vortex_charge_rottime;
.float vortex_chargepool_ammo;
.float oknex_charge;
.float oknex_charge_rottime;
.float oknex_chargepool_ammo;
.int hagar_load;

.int grab; // 0 = can't grab, 1 = owner can grab, 2 = owner and team mates can grab, 3 = anyone can grab

.int spectatee_status;
.bool zoomstate;

.entity personal;

.bool just_joined;

.entity realowner;

//float serverflags;

.bool player_blocked;

////

.WepSet dual_weapons;

IntrusiveList g_monsters;
IntrusiveList g_waypoints;
IntrusiveList g_vehicles;
IntrusiveList g_turrets;
IntrusiveList g_mines;
IntrusiveList g_projectiles;
IntrusiveList g_items;
IntrusiveList g_initforplayer;
IntrusiveList g_clones;
IntrusiveList g_spawnpoints;
IntrusiveList g_bot_targets;
IntrusiveList g_bot_dodge;
IntrusiveList g_damagedbycontents;
IntrusiveList g_railgunhit;
IntrusiveList g_ladders;
IntrusiveList g_locations;
IntrusiveList g_saved_team;
IntrusiveList g_monster_targets;
IntrusiveList g_pathlib_nodes;
IntrusiveList g_moveables;
STATIC_INIT(defs)
{
	g_monsters = IL_NEW();
	g_waypoints = IL_NEW();
	g_vehicles = IL_NEW();
	g_turrets = IL_NEW();
	g_mines = IL_NEW();
	g_projectiles = IL_NEW();
	g_items = IL_NEW();
	g_initforplayer = IL_NEW();
	g_clones = IL_NEW();
	g_spawnpoints = IL_NEW();
	g_bot_targets = IL_NEW();
	g_bot_dodge = IL_NEW();
	g_damagedbycontents = IL_NEW();
	g_railgunhit = IL_NEW();
	g_ladders = IL_NEW();
	g_locations = IL_NEW();
	g_saved_team = IL_NEW();
	g_monster_targets = IL_NEW();
	g_pathlib_nodes = IL_NEW();
	g_moveables = IL_NEW();
}
