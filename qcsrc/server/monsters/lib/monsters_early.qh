// for definitions used outside the monsters folder

#ifdef SVQC
.string spawnmob;
.float monster_attack;

float monster_skill;
float spawncode_first_load; // used to tell the player the monster database is loading (TODO: fix this?)

.entity monster_owner; // new monster owner entity, fixes non-solid monsters
.float monstercount; // per player monster count

.float stat_monsters_killed; // stats
.float stat_monsters_total;
float monsters_total;
float monsters_killed;
void monsters_setstatus(); // monsters.qc
.float monster_moveflags; // checks where to move when not attacking
#endif // SVQC

#ifndef MENUQC
.float monsterid;
// Monster IDs
float MONSTER_FIRST 		= 1;
float MONSTER_ZOMBIE 		= 2;
float MONSTER_BRUTE 		= 3;
float MONSTER_ANIMUS 		= 4;
float MONSTER_SHAMBLER 		= 5;
float MONSTER_BRUISER 		= 6;
float MONSTER_WYVERN 		= 7;
float MONSTER_CERBERUS		= 8;
float MONSTER_SLIME 		= 9;
float MONSTER_KNIGHT 		= 10;
float MONSTER_STINGRAY 		= 11;
float MONSTER_MAGE		= 12;
float MONSTER_SPIDER 		= 13;
float MONSTER_LAST		= 14;

// id-string converters (TODO: remove these!)
string monster_id2string(float mnster)
{
	switch(mnster)
	{
		case MONSTER_ZOMBIE: 	return "zombie";
		case MONSTER_BRUTE: 	return "brute";
		case MONSTER_ANIMUS: 	return "animus";
		case MONSTER_SHAMBLER: 	return "shambler";
		case MONSTER_BRUISER: 	return "bruiser";
		case MONSTER_WYVERN: 	return "wyvern";
		case MONSTER_CERBERUS: 	return "cerberus";
		case MONSTER_SLIME: 	return "slime";
		case MONSTER_KNIGHT: 	return "knight";
		case MONSTER_STINGRAY: 	return "stingray";
		case MONSTER_MAGE: 		return "mage";
		case MONSTER_SPIDER: 	return "spider";
		default: return "";
	}
}
float monster_string2id(string monster)
{
	switch(monster)
	{
		case "zombie": 		return MONSTER_ZOMBIE;
		case "brute": 		return MONSTER_BRUTE;
		case "animus": 		return MONSTER_ANIMUS;
		case "shambler": 	return MONSTER_SHAMBLER;
		case "bruiser": 	return MONSTER_BRUISER;
		case "wyvern": 		return MONSTER_WYVERN;
		case "cerberus": 	return MONSTER_CERBERUS;
		case "slime": 		return MONSTER_SLIME;
		case "knight": 		return MONSTER_KNIGHT;
		case "stingray": 	return MONSTER_STINGRAY;
		case "mage": 		return MONSTER_MAGE;
		case "spider": 		return MONSTER_SPIDER;
		default: 			return 0;
	}
}

.float anim_start_time;

float MSF_UPDATE       = 2;
float MSF_STATUS       = 4;
float MSF_SETUP        = 8;
float MSF_ANG          = 16;
float MSF_MOVE         = 32;
float MSF_ANIM         = 64;

float MSF_FULL_UPDATE  = 16777215;

#endif // CSQC/SVQC
