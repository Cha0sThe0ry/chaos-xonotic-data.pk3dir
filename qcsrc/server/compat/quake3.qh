#pragma once

int q3compat = 0;
#define Q3COMPAT_ARENA BIT(0)
#define Q3COMPAT_DEFI BIT(1)

bool DoesQ3ARemoveThisEntity(entity this);

.int fragsfilter_cnt;

// The ammo spawnfunc knows which weapon will use the ammo so it can look up the type
// and calculate the amount required for the number of shots in the count field.
#define _SPAWNFUNC_Q3AMMO(ammo_classname, xonwep) \
	if(this.count) \
		SetResource(this, xonwep.ammo_type, this.count * GetAmmoConsumptionPrimary(xonwep.netname)); \
	spawnfunc_body(GetAmmoItem(xonwep.ammo_type));

// Ammo only, unconditional
#define SPAWNFUNC_Q3AMMO(ammo_classname, xonwep) \
	spawnfunc(ammo_classname) \
	{ \
		_SPAWNFUNC_Q3AMMO(ammo_classname, xonwep) \
	}

// Ammo only, conditional
#define SPAWNFUNC_Q3AMMO_COND(ammo_classname, cond, xonwep1, xonwep0) \
	spawnfunc(ammo_classname) \
	{ \
		entity xonwep = (cond) ? xonwep1 : xonwep0; \
		_SPAWNFUNC_Q3AMMO(ammo_classname, xonwep) \
	}

// Weapon & ammo, unconditional
#define SPAWNFUNC_Q3(weapon_classname, ammo_classname, xonwep) \
	SPAWNFUNC_WEAPON(weapon_classname, xonwep) \
	SPAWNFUNC_Q3AMMO(ammo_classname, xonwep)

// Weapon & ammo, conditional
#define SPAWNFUNC_Q3_COND(weapon_classname, ammo_classname, cond, xonwep1, xonwep0) \
	SPAWNFUNC_WEAPON_COND(weapon_classname, cond, xonwep1, xonwep0) \
	SPAWNFUNC_Q3AMMO_COND(ammo_classname, cond, xonwep1, xonwep0)

