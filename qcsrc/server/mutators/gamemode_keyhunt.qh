// these are needed since mutators are compiled last

#ifdef SVQC

// score rule declarations
#define ST_KH_CAPS 1
#define SP_KH_CAPS 4
#define SP_KH_CAPTIME 5
#define SP_KH_PICKUPS 6
#define SP_KH_DROPS 7
#define SP_KH_KCKILLS 8

// key constants // for most of these, there is just one question to be asked: WHYYYYY?
#define KEY_MIN ('-10 -10 -46')
#define KEY_MAX ('10 10 3')

#define KH_KEY_ZSHIFT 22
#define KH_KEY_XYDIST 24
#define KH_KEY_XYSPEED 45

#define KH_VEHICLE_KEY_XYDIST 100
#define KH_VEHICLE_KEY_ZSHIFT 80

#define KEY_SCALE 1

#define KEY_BRIGHTNESS 2

#define KEY_THINKRATE 0.1
#define KEY_TOUCHRATE 0.5

#define KEY_DROP_OFFSET ('0 0 16')
#define KEY_CARRY_OFFSET ('-16 0 8')
#define KEY_SPAWN_OFFSET ('0 0 1' * (PL_MAX_z - 13))
#define KEY_WAYPOINT_OFFSET ('0 0 64')
#define KEY_FLOAT_OFFSET ('0 0 16')
#define KEY_PASS_ARC_OFFSET ('0 0 -10')

#define VEHICLE_KEY_OFFSET ('0 0 96')
#define VEHICLE_KEY_SCALE 2

// waypoint colors
#define WPCOLOR_ENEMYKC(t) (colormapPaletteColor(t - 1, FALSE) * 0.75)
#define WPCOLOR_KEYCARRIER(t) ('0.8 0.8 0')
#define WPCOLOR_DROPPEDKEY(t) (('0.25 0.25 0.25' + colormapPaletteColor(t - 1, FALSE)) * 0.5)

// sounds
#define snd_key_taken noise
#define snd_key_returned noise1
#define snd_key_capture noise2
#define snd_key_respawn noise3
.string snd_key_dropped;
.string snd_key_touch;
.string snd_key_pass;

// effects
.float toucheffectnum;
.float passeffectnum;
.float capeffectnum;

// list of keys on the map
entity kh_worldkeylist;
.entity kh_worldkeynext;
.entity kh_stalekeynext;

// waypoint sprites
.entity wps_helpme;
.entity wps_keycarrier;
.entity wps_keydropped;
.entity wps_enemykeycarrier;
.float wps_helpme_time;
float wpforenemy_announced;
float wpforenemy_nextthink;

// statuses
#define KEY_DROPPED 2
#define KEY_CARRY 3
#define KEY_PASSING 4

// others defined in CTF code (TODO: separate?)
#define PICKUP_START 3
#define PICKUP_KILLED 4

// carrier stats
.float stat_kh_redkey_team;
.float stat_kh_bluekey_team;
.float stat_kh_yellowkey_team;
.float stat_kh_pinkkey_team;

// key properties
.float kh_pickuptime;
.float kh_droptime;
.float kh_status; // status of the key (KEY_DROPPED, KEY_CARRY declared globally)
.entity kh_dropper; // don't allow spam of dropping the key
.entity kh_lastkiller;
.float max_key_health;
.float next_take_time;
float kh_teams;

// passing/throwing properties
.float pass_distance;
.entity pass_sender;
.entity pass_target;
.float throw_antispam;
.float throw_prevtime;
.float throw_count;

// alarms
float kh_alarm_time;
float kh_siren_time;

// macro for checking all keys
#define KH_FOR_EACH_KEY(v) for(v = kh_worldkeylist; v; v = v.kh_worldkeynext)

#endif


// networked key statuses
//     bits  0- 4: team of key 1, or 0 for no such key, or 30 for dropped, or 31 for self
//     bits  5- 9: team of key 2, or 0 for no such key, or 30 for dropped, or 31 for self
//     bits 10-14: team of key 3, or 0 for no such key, or 30 for dropped, or 31 for self
//     bits 15-19: team of key 4, or 0 for no such key, or 30 for dropped, or 31 for self
.float kh_keystatus;

const float	KH_RED_KEY_TAKEN			= 1;
const float	KH_RED_KEY_LOST				= 2;
const float	KH_RED_KEY_CARRYING			= 3;
const float	KH_BLUE_KEY_TAKEN			= 4;
const float	KH_BLUE_KEY_LOST			= 8;
const float	KH_BLUE_KEY_CARRYING		= 12;
const float	KH_YELLOW_KEY_TAKEN			= 16;
const float	KH_YELLOW_KEY_LOST			= 32;
const float	KH_YELLOW_KEY_CARRYING		= 48;
const float	KH_PINK_KEY_TAKEN			= 64;
const float	KH_PINK_KEY_LOST			= 128;
const float	KH_PINK_KEY_CARRYING		= 192;
