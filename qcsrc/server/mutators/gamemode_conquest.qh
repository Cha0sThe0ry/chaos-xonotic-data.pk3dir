#ifndef GAMEMODE_CONQUEST_H
#define GAMEMODE_CONQUEST_H

//csqc networking flags
const int CQSF_SETUP = 1;    //! Initial setup, responsible for communicating location, y-angle and model
const int CQSF_TEAM = 2;     //! What team point belong to
const int CQSF_HEALTH = 4;   //! Capture progress. Networked as 0--255
const int CQSF_STATE = 8;    //! Captured or not
const int CQSF_NAME = 16;    //! Display name (can be defined by mapper)

// score rule declarations
const int ST_CONQUEST_ROUNDS = 1;
const int SP_CONQUEST_LIBERATED = 4;
const int SP_CONQUEST_CAPTURED = 5;

// list of control points on the map
entity cq_worldcplist;
.entity cq_worldcpnext;

// control point constants
int cq_teams;
#define CQ_CP_THINKRATE 0.15

#define CQ_CP_MIN ('-35 -35 -3')
#define CQ_CP_MAX ('35 35 195')

// teleportation
.float teleport_antispam;
.vector cq_deathloc;
.entity cq_spawn_by;

// statuses
const int CP_NEUTRAL = 1;
const int CP_CAPTURED = 2;

// control point properties
.int cq_status; // status of the control point (CP_NEUTRAL, CP_CAPTURED declared globally)

// compatibility with old maps
const int COMPAT_DOM = 1;
const int COMPAT_ONS = 2;
.int cq_compat; // for checking if a map already has conquest support

.float cq_capdistance;
.int cq_originalteam; // stored spawn team for resetting

#endif
