#pragma once

#include <common/weapons/_all.qh>
#include <common/stats.qh>
#include <server/client.qh>
#include <server/world.qh>

#include <server/intermission.qh>
#include <server/items/items.qh>

#include <server/mutators/_mod.qh>

#include <common/constants.qh>
#include <common/mapinfo.qh>
#include <common/turrets/all.qh>

float trace_hits_box_1d(float end, float thmi, float thma);

float trace_hits_box(vector start, vector end, vector thmi, vector thma);

float tracebox_hits_box(vector start, vector mi, vector ma, vector end, vector thmi, vector thma);

void crosshair_trace(entity pl);

void crosshair_trace_plusvisibletriggers(entity pl);
void WarpZone_crosshair_trace_plusvisibletriggers(entity pl);
void crosshair_trace_plusvisibletriggers__is_wz(entity pl, bool is_wz);

string uid2name(string myuid);

bool MoveToRandomLocationWithinBounds(entity e, vector boundmin, vector boundmax, float goodcontents, float badcontents, float badsurfaceflags, int attempts, float maxaboveground, float minviewdistance);

float MoveToRandomMapLocation(entity e, float goodcontents, float badcontents, float badsurfaceflags, float attempts, float maxaboveground, float minviewdistance);

float tracebox_hits_box(vector start, vector mi, vector ma, vector end, vector thmi, vector thma);

void traceline_antilag (entity source, vector v1, vector v2, float nomonst, entity forent, float lag);

void WarpZone_crosshair_trace(entity pl);

void WarpZone_traceline_antilag (entity source, vector v1, vector v2, float nomonst, entity forent, float lag);

#define PROJECTILE_TOUCH(e,t) MACRO_BEGIN if (WarpZone_Projectile_Touch(e,t)) return; MACRO_END

// copies a string to a tempstring (so one can strunzone it)
string strcat1(string s) = #115; // FRIK_FILE

IntrusiveList g_ctrace_changed;
STATIC_INIT(g_ctrace_changed) { g_ctrace_changed = IL_NEW(); }
