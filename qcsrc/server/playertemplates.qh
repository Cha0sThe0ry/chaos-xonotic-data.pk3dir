/// \file
/// \brief Header file that describes the Player Templates mutator.
/// \author Lyberta
/// \copyright GNU GPLv3 or any later version.

#pragma once

/// \brief Returns the full name of the player template cvar.
/// \param[in] template Name of the template.
/// \param[in] variable Name of the variable.
/// \return Full name of the variable.
string PlayerTemplate_GetFullCvarName(string template, string variable);

/// \brief Returns the name of the cvar that is used for default value.
/// \param[in] Name of the player template variable.
/// \return Name of the cvar that is used for default value.
string PlayerTemplate_GetDefaultCvarName(string variable);

/// \brief Returns the default floating point value of the player template
/// variable.
/// \param[in] variable Name of the variable.
/// \return Default floating point value of the player template variable.
float PlayerTemplate_GetDefaultFloatValue(string variable);

/// \brief Returns the default string value of the player template variable.
/// \param[in] variable Name of the variable.
/// \return Default string value of the player template variable.
string PlayerTemplate_GetDefaultStringValue(string variable);

/// \brief Gets the floating point value of the variable from the given
/// template.
/// \param[in] template Name of the template.
/// \param[in] variable Name of the variable.
/// \return Value of the variable.
float PlayerTemplate_GetFloatValue(string template, string variable);

/// \brief Gets the string value of the variable from the given template.
/// \param[in] template Name of the template.
/// \param[in] variable Name of the variable.
/// \return Value of the variable.
string PlayerTemplate_GetStringValue(string template, string variable);

/// \brief Gives player items according to the given template's variable.
/// \param[in] player Player to give items to.
/// \param[in] template Name of the template.
/// \param[in] variable Name of the variable.
/// \return Enum value to pass to mutator hook.
float PlayerTemplate_GivePlayerItem(entity player, string template,
	string variable);

// =========================== Hook handlers =================================

/// \brief Setups the player during spawn according to the given template.
/// \param[in,out] player Player to setup.
/// \param[in] template Name of the template.
/// \return No return.
void PlayerTemplate_PlayerSpawn(entity player, string template);

/// \brief Forbids weapon dropping according to the given template.
/// \param[in] template Name of the template.
/// \return Value to pass to mutator hook.
bool PlayerTemplate_ForbidThrowCurrentWeapon(string template);

/// \brief Regenerates player health according to the given template.
/// \param[in] player Player to regenerate.
/// \param[in] template Name of the template.
/// \return Value to pass to mutator hook.
float PlayerTemplate_PlayerRegen(entity player, string template);

/// \brief Gives player items according to the given template.
/// \param[in,out] player Player to give items to.
/// \param[in] item Item which player has picked up.
/// \param[in] template Name of the template.
/// \return Enum value to pass to mutator hook.
float PlayerTemplate_ItemTouch(entity player, entity item, string template);

/// \brief Changes the damage done using templates' attack and defense scales.
/// \param[in] attacke Attacker entity.
/// \param[in] attackertemplate Template of the attacker.
/// \param[in] victim Victim entity.
/// \param[in] victimtemplate Template of the victim.
/// \param[in] deathtype Type of the damage.
/// \param[in] damage Damage to adjust.
/// \return Adjusted damage.
float PlayerTemplate_Damage_Calculate(entity attacker, string attackertemplate,
	entity victim, string victimtemplate, float deathtype, float damage);

/// \brief Strips the player of their weapons if the player is not allowed to
/// drop them.
/// \param[in,out] player Player to work with.
/// \param[in] template Name of the template.
/// \return No return.
/// \note You must hook with CBC_ORDER_FIRST in order for this to be effective.
void PlayerTemplate_PlayerDies(entity player, string template);
