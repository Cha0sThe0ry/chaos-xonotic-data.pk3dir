#ifndef VEHICLES_DEF_H
#define VEHICLES_DEF_H

#if defined(CSQC)
#elif defined(MENUQC)
#elif defined(SVQC)
    #include "../../common/util-pre.qh"
    #include "../sys-pre.qh"
    #include "../../dpdefs/progsdefs.qc"
    #include "../../dpdefs/dpextensions.qc"
    #include "../sys-post.qh"
    #include "../../warpzonelib/anglestransform.qh"
    #include "../../warpzonelib/mathlib.qh"
    #include "../../warpzonelib/common.qh"
    #include "../../warpzonelib/util_server.qh"
    #include "../../warpzonelib/server.qh"
    #include "../../common/constants.qh"
    #include "../../common/stats.qh"
    #include "../../common/teams.qh"
    #include "../../common/util.qh"
    #include "../../common/nades.qh"
    #include "../../common/buffs.qh"
    #include "../../common/test.qh"
    #include "../../common/counting.qh"
    #include "../../common/urllib.qh"
    #include "../../common/command/markup.qh"
    #include "../../common/command/rpn.qh"
    #include "../../common/command/generic.qh"
    #include "../../common/command/shared_defs.qh"
    #include "../../common/net_notice.qh"
    #include "../../common/animdecide.qh"
    #include "../../common/monsters/monsters.qh"
    #include "../../common/monsters/sv_monsters.qh"
    #include "../../common/monsters/spawn.qh"
    #include "../../common/weapons/config.qh"
    #include "../../common/weapons/weapons.qh"
    #include "../weapons/accuracy.qh"
    #include "../weapons/common.qh"
    #include "../weapons/csqcprojectile.qh"
    #include "../weapons/hitplot.qh"
    #include "../weapons/selection.qh"
    #include "../weapons/spawning.qh"
    #include "../weapons/throwing.qh"
    #include "../weapons/tracing.qh"
    #include "../weapons/weaponstats.qh"
    #include "../weapons/weaponsystem.qh"
    #include "../t_items.qh"
    #include "../autocvars.qh"
    #include "../constants.qh"
    #include "../defs.qh"
    #include "../../common/notifications.qh"
    #include "../../common/deathtypes.qh"
    #include "../mutators/mutators_include.qh"
    #include "../tturrets/include/turrets_early.qh"
#endif

// #define VEHICLES_USE_ODE
#define VEHICLES_ENABLED
#ifdef VEHICLES_ENABLED

.float vehicle_flags;
const float VHF_ISVEHICLE     = 2;    /// Indicates vehicle
const float VHF_HASSHIELD     = 4;    /// Vehicle has shileding
const float VHF_SHIELDREGEN   = 8;    /// Vehicles shield regenerates
const float VHF_HEALTHREGEN   = 16;   /// Vehicles health regenerates
const float VHF_ENERGYREGEN   = 32;   /// Vehicles energy regenerates
const float VHF_DEATHEJECT    = 64;   /// Vehicle ejects pilot upon fatal damage
const float VHF_MOVE_GROUND   = 128;  /// Vehicle moves on gound
const float VHF_MOVE_HOVER    = 256;  /// Vehicle hover close to gound
const float VHF_MOVE_FLY      = 512;  /// Vehicle is airborn
const float VHF_DMGSHAKE      = 1024; /// Add random velocity each frame if health < 50%
const float VHF_DMGROLL       = 2048; /// Add random angles each frame if health < 50%
const float VHF_DMGHEADROLL   = 4096; /// Add random head angles each frame if health < 50%
const float VHF_MULTISLOT     = 8192; /// Vehicle has multiple player slots
const float VHF_PLAYERSLOT    = 16384;    /// This ent is a player slot on a multi-person vehicle

.entity gun1;
.entity gun2;
.entity gun3;
.entity vehicle_shieldent;  /// Entity to disply the shild effect on damage
.entity vehicle;
.entity vehicle_viewport;
.entity vehicle_hudmodel;
.entity vehicle_controller;

.entity gunner1;
.entity gunner2;

.float vehicle_health;      /// If self is player this is 0..100 indicating precentage of health left on vehicle. If self is vehile, this is the real health value.
.float vehicle_energy;      /// If self is player this is 0..100 indicating precentage of energy left on vehicle. If self is vehile, this is the real energy value.
.float vehicle_shield;      /// If self is player this is 0..100 indicating precentage of shield left on vehicle. If self is vehile, this is the real shield value.

.float vehicle_ammo1;   /// If self is player this field's use depends on the individual vehile. If self is vehile, this is the real ammo1 value.
.float vehicle_reload1; /// If self is player this field's use depends on the individual vehile. If self is vehile, this is the real reload1 value.
.float vehicle_ammo2;   /// If self is player this field's use depends on the individual vehile. If self is vehile, this is the real ammo2 value.
.float vehicle_reload2; /// If self is player this field's use depends on the individual vehile. If self is vehile, this is the real reload2 value.

.float sound_nexttime;
const float VOL_VEHICLEENGINE = 1;

.float hud;
.float dmg_time;
.float  vehicle_respawntime;
//.void() vehicle_spawn;

void vehicles_exit(float eject);
.void(float exit_flags) vehicle_exit;
const float VHEF_NORMAL = 0;  /// User pressed exit key
const float VHEF_EJECT  = 1;  /// User pressed exit key 3 times fast (not implemented) or vehile is dying
const float VHEF_RELESE = 2;  /// Release ownership, client possibly allready dissconnected / went spec / changed team / used "kill" (not implemented)

const float SVC_SETVIEWPORT   = 5;   // Net.Protocol 0x05
const float SVC_SETVIEWANGLES = 10;  // Net.Protocol 0x0A
const float SVC_UPDATEENTITY  = 128; // Net.Protocol 0x80

.void() vehicle_enter;  /// Vehicles custom funciton to be executed when owner exit it
.void() vehicle_die;    /// Vehicles custom function to be executed when vehile die
const float VHSF_NORMAL = 0;
const float VHSF_FACTORY = 2;
.void(float _spawnflag) vehicle_spawn;  /// Vehicles custom fucntion to be efecuted when vehicle (re)spawns
.float(float _imp) vehicles_impulse;
.float vehicle_weapon2mode = volly_counter;

#ifdef VEHICLES_USE_ODE
void(entity e, float physics_enabled) physics_enable = #540; // enable or disable physics on object
void(entity e, vector force, vector force_pos) physics_addforce = #541; // apply a force from certain origin, length of force vector is power of force
void(entity e, vector torque) physics_addtorque = #542; // add relative torque
#endif  // VEHICLES_USE_ODE
#endif  // VEHICLES_ENABLED
#endif