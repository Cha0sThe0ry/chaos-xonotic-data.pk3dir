#pragma once

// Transition from global 'self' to local 'this'

// Step 1: auto oldself
#if 1
    #define SELFPARAM() noref const entity this = self
#endif

// Step 2: const self
#if 1
    #define self (0, self)
    [[alias("self")]] entity __self;
    #define setself(s) (__self = s)
    #define WITHSELF(value, block) WITH(entity, __self, value, (0, block))
#endif

// Step 3: propagate SELFPARAM()
#if 1
    #undef self
    #define self (this, self)
    #undef SELFPARAM
    #define SELFPARAM() const entity this = __self
#endif

// Step 4: kill unstructured setself
#if 0
    #undef setself
#endif

// Step 5: this should work
#if 0
    #undef self
    #define self (0, this)
#endif

// Step 6: remove SELFPARAM, add parameters
#if 0
    #undef SELFPARAM
#endif

// Step 7: remove WITHSELF, no replacement
#if 0
    #undef WITHSELF
    #define WITHSELF(value, block) block
#endif

#define SELFWRAP(T, R, args, forward) \
    .R() T; \
    .R() __##T = T; \
    .R args self##T; \
    R T##_self() { SELFPARAM(); return this.self##T forward; }

noref entity _selftemp;
#define SELFWRAP_SET(T, e, f) \
    (_selftemp = (e), _selftemp.__##T = ((f) ? T##_self : func_null), _selftemp.self##T = (f))
#define SELFWRAP_GET(T, e) \
    (0, (e).self##T)
#define _SELFWRAP_SET(T, e, f) \
    ((e).__##T = (f))
#define _SELFWRAP_GET(T, e) \
    (0, (e).__##T)

SELFWRAP(think, void, (entity this), (this))
#define setthink(e, f) _SELFWRAP_SET(think, e, f)
#define getthink(e) _SELFWRAP_GET(think, e)

SELFWRAP(touch, void, (entity this), (this))
#define settouch(e, f) _SELFWRAP_SET(touch, e, f)
#define gettouch(e) _SELFWRAP_GET(touch, e)

SELFWRAP(predraw, void, (entity this), (this))
#define setpredraw(e, f) SELFWRAP_SET(predraw, e, f)

#ifndef MENUQC
void adaptor_think2touch() { SELFPARAM(); WITH(entity, other, NULL, gettouch(this)()); }
void adaptor_think2use() { SELFPARAM(); if (this.use) this.use(this, NULL, NULL); }
#endif
