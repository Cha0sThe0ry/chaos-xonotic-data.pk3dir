#pragma once

#ifdef SVQC
// copies a string to a tempstring (so one can strunzone it)
string strcat1(string s) = #115; // FRIK_FILE
#endif

#if defined(CSQC)
#define REPLICATE_FIELD(type, name) type name
#elif defined(SVQC)
#define REPLICATE_FIELD(type, name) .type name
#endif

#ifdef GAMEQC

    /**
     * Replicate a client cvar into a server field
     *
     * @param fld   The field to replicate into
     * @param type  The field type
     * @param cvar  The cvar name
     */
	#define REPLICATE(...) EVAL_REPLICATE(OVERLOAD(REPLICATE, __VA_ARGS__))
	#define EVAL_REPLICATE(...) __VA_ARGS__

	#if defined(SVQC)
	ACCUMULATE void ReplicateVars(entity this, entity store, string thisname, int i) {}
	#elif defined(CSQC)
	ACCUMULATE void ReplicateVars(int mode) {}
	#endif

	#define REPLICATE_3(fld, type, var) REPLICATE_4(fld, type, var, )
	#define REPLICATE_4(fld, type, var, func) REPLICATE_##type(fld, var, func)
	#if defined(SVQC)
		#define REPLICATE_string(fld, var, func) \
			REPLICATE_7(fld, string, var, , \
		{ strcpy(field, it); }, \
		{ strfree(field); }, \
		{ \
			/* also initialize to the default value of func when requesting cvars */ \
			string s = func(this, strcat1(field)); \
			if (s != field) \
			{ \
				strcpy(field, s); \
			} \
		})
		#define REPLICATE_float(fld, var, func) REPLICATE_7(fld, float, var, func,  { field = stof(it); },          , )
		#define REPLICATE_bool(fld, var, func) REPLICATE_7(fld, bool, var, func,   { field = boolean(stoi(it)); }, , )
		#define REPLICATE_int(fld, var, func) REPLICATE_7(fld, int, var, func,    { field = stoi(it); },          , )

		#define REPLICATE_7(fld, type, var, func, create, destroy, after) \
			void ReplicateVars(entity this, entity store, string thisname, int i) \
			{ \
				type field = store.fld; \
				if (i < 0) { destroy } \
				else \
				{ \
					string it = func(argv(i + 1)); \
					bool current = thisname == var; \
					if (i > 0) \
					{ \
						if (current) { create } \
					} \
					else \
					{ \
						stuffcmd(this, strcat("cl_cmd sendcvar ", var, "\n")); \
					} \
					if (current) { after } \
				} \
				store.fld = field; \
			}
	#elif defined(CSQC)
		noref float ReplicateVars_time;
		#define ReplicateVars_NOT_SENDING() (time > ReplicateVars_time)
		#define ReplicateVars_DELAY(t) ReplicateVars_time = time + t
		#define ReplicateVars_DELAY_1FRAME() ReplicateVars_time = time
		#define REPLICATE_string(fld, var, func) REPLICATE_7(fld, float, var, func, (fld != cvar_string(var)), { strcpy(fld, cvar_string(var)); }, { strfree(fld); })
		#define REPLICATE_float(fld, var, func) REPLICATE_7(fld, float, var, func, (fld != cvar(var)), { fld = cvar(var); }, )
		#define REPLICATE_bool(fld, var, func) REPLICATE_7(fld, bool, var, func, (fld != cvar(var)), { fld = cvar(var); }, )
		#define REPLICATE_int(fld, var, func) REPLICATE_7(fld, int, var, func, (fld != cvar(var)), { fld = cvar(var); }, )

		void ReplicateVars_Destroy() { ReplicateVars(1); }
		void ReplicateVars_Send_All() { ReplicateVars(-1); }
		void ReplicateVars_Check()
		{
			// if a cvar has changed send it and check cvars again next frame
			ReplicateVars(0);
			if (ReplicateVars_NOT_SENDING()) // if no cvar has changed
				ReplicateVars_DELAY(0.8 + random() * 0.4); // check cvars after a while
		}
		void ReplicateVars_Send(string cvarname) { localcmd(strcat("cl_cmd sendcvar ", cvarname, "\n")); }

		#define REPLICATE_7(fld, type, var, func, check, update, destroy) \
			void ReplicateVars(int mode) \
			{ \
				if (mode == 1) { destroy } \
				else if (mode == -1) { ReplicateVars_Send(var); update } \
				else if (ReplicateVars_NOT_SENDING() && check) \
				{ \
					ReplicateVars_Send(var); \
					ReplicateVars_DELAY_1FRAME(); \
					update \
					return; \
				} \
			}

		#define REPLICATE_SIMPLE(field, cvarname) MACRO_BEGIN \
			if (ReplicateVars_NOT_SENDING()) \
			{ \
				float thecvar = cvar(cvarname); \
				if(field != thecvar) \
				{ \
					ReplicateVars_Send(cvarname); \
					ReplicateVars_DELAY_1FRAME(); \
					field = thecvar; \
					return; \
				} \
			} \
		MACRO_END
	#endif

#endif
